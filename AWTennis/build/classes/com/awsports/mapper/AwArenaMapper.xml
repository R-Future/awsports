<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awsports.mapper.AwArenaMapper">
  <resultMap id="BaseResultMap" type="com.awsports.pojo.AwArena">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="CHAR" property="name" />
    <result column="address" jdbcType="CHAR" property="address" />
    <result column="type" jdbcType="BIT" property="type" />
    <result column="indoorNumber" jdbcType="INTEGER" property="indoornumber" />
    <result column="outdoorNumber" jdbcType="INTEGER" property="outdoornumber" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="invalid" jdbcType="BIT" property="invalid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.awsports.pojo.AwArena">
    <result column="note" jdbcType="LONGVARCHAR" property="note" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, address, type, indoorNumber, outdoorNumber, created_at, updated_at, invalid
  </sql>
  <sql id="Blob_Column_List">
    note
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.awsports.pojo.AwArenaExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from aw_arena
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.awsports.pojo.AwArenaExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from aw_arena
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from aw_arena
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from aw_arena
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.awsports.pojo.AwArenaExample">
    delete from aw_arena
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.awsports.pojo.AwArena">
    insert into aw_arena (id, name, address, 
      type, indoorNumber, outdoorNumber, 
      created_at, updated_at, invalid, 
      note)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=CHAR}, #{address,jdbcType=CHAR}, 
      #{type,jdbcType=BIT}, #{indoornumber,jdbcType=INTEGER}, #{outdoornumber,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{invalid,jdbcType=BIT}, 
      #{note,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.awsports.pojo.AwArena">
    insert into aw_arena
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="indoornumber != null">
        indoorNumber,
      </if>
      <if test="outdoornumber != null">
        outdoorNumber,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="invalid != null">
        invalid,
      </if>
      <if test="note != null">
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=CHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=CHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=BIT},
      </if>
      <if test="indoornumber != null">
        #{indoornumber,jdbcType=INTEGER},
      </if>
      <if test="outdoornumber != null">
        #{outdoornumber,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="invalid != null">
        #{invalid,jdbcType=BIT},
      </if>
      <if test="note != null">
        #{note,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.awsports.pojo.AwArenaExample" resultType="java.lang.Long">
    select count(*) from aw_arena
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update aw_arena
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=CHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=CHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=BIT},
      </if>
      <if test="record.indoornumber != null">
        indoorNumber = #{record.indoornumber,jdbcType=INTEGER},
      </if>
      <if test="record.outdoornumber != null">
        outdoorNumber = #{record.outdoornumber,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.invalid != null">
        invalid = #{record.invalid,jdbcType=BIT},
      </if>
      <if test="record.note != null">
        note = #{record.note,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update aw_arena
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=CHAR},
      address = #{record.address,jdbcType=CHAR},
      type = #{record.type,jdbcType=BIT},
      indoorNumber = #{record.indoornumber,jdbcType=INTEGER},
      outdoorNumber = #{record.outdoornumber,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      invalid = #{record.invalid,jdbcType=BIT},
      note = #{record.note,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update aw_arena
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=CHAR},
      address = #{record.address,jdbcType=CHAR},
      type = #{record.type,jdbcType=BIT},
      indoorNumber = #{record.indoornumber,jdbcType=INTEGER},
      outdoorNumber = #{record.outdoornumber,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      invalid = #{record.invalid,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.awsports.pojo.AwArena">
    update aw_arena
    <set>
      <if test="name != null">
        name = #{name,jdbcType=CHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=CHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=BIT},
      </if>
      <if test="indoornumber != null">
        indoorNumber = #{indoornumber,jdbcType=INTEGER},
      </if>
      <if test="outdoornumber != null">
        outdoorNumber = #{outdoornumber,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="invalid != null">
        invalid = #{invalid,jdbcType=BIT},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.awsports.pojo.AwArena">
    update aw_arena
    set name = #{name,jdbcType=CHAR},
      address = #{address,jdbcType=CHAR},
      type = #{type,jdbcType=BIT},
      indoorNumber = #{indoornumber,jdbcType=INTEGER},
      outdoorNumber = #{outdoornumber,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      invalid = #{invalid,jdbcType=BIT},
      note = #{note,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awsports.pojo.AwArena">
    update aw_arena
    set name = #{name,jdbcType=CHAR},
      address = #{address,jdbcType=CHAR},
      type = #{type,jdbcType=BIT},
      indoorNumber = #{indoornumber,jdbcType=INTEGER},
      outdoorNumber = #{outdoornumber,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      invalid = #{invalid,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>