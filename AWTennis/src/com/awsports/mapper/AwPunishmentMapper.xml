<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awsports.mapper.AwPunishmentMapper">
  <resultMap id="BaseResultMap" type="com.awsports.pojo.AwPunishment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userId" jdbcType="INTEGER" property="userid" />
    <result column="tournamentId" jdbcType="INTEGER" property="tournamentid" />
    <result column="matchtime" jdbcType="TIMESTAMP" property="matchtime" />
    <result column="entry" jdbcType="INTEGER" property="entry" />
    <result column="points" jdbcType="INTEGER" property="points" />
    <result column="createdAt" jdbcType="TIMESTAMP" property="createdat" />
    <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedat" />
    <result column="invalid" jdbcType="BIT" property="invalid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.awsports.pojo.AwPunishment">
    <result column="note" jdbcType="LONGVARCHAR" property="note" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userId, tournamentId, matchtime, entry, points, createdAt, updatedAt, invalid
  </sql>
  <sql id="Blob_Column_List">
    note
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.awsports.pojo.AwPunishmentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from aw_punishment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.awsports.pojo.AwPunishmentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from aw_punishment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from aw_punishment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from aw_punishment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.awsports.pojo.AwPunishmentExample">
    delete from aw_punishment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.awsports.pojo.AwPunishment">
    insert into aw_punishment (id, userId, tournamentId, 
      matchtime, entry, points, 
      createdAt, updatedAt, invalid, 
      note)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{tournamentid,jdbcType=INTEGER}, 
      #{matchtime,jdbcType=TIMESTAMP}, #{entry,jdbcType=INTEGER}, #{points,jdbcType=INTEGER}, 
      #{createdat,jdbcType=TIMESTAMP}, #{updatedat,jdbcType=TIMESTAMP}, #{invalid,jdbcType=BIT}, 
      #{note,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.awsports.pojo.AwPunishment">
    insert into aw_punishment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="tournamentid != null">
        tournamentId,
      </if>
      <if test="matchtime != null">
        matchtime,
      </if>
      <if test="entry != null">
        entry,
      </if>
      <if test="points != null">
        points,
      </if>
      <if test="createdat != null">
        createdAt,
      </if>
      <if test="updatedat != null">
        updatedAt,
      </if>
      <if test="invalid != null">
        invalid,
      </if>
      <if test="note != null">
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="tournamentid != null">
        #{tournamentid,jdbcType=INTEGER},
      </if>
      <if test="matchtime != null">
        #{matchtime,jdbcType=TIMESTAMP},
      </if>
      <if test="entry != null">
        #{entry,jdbcType=INTEGER},
      </if>
      <if test="points != null">
        #{points,jdbcType=INTEGER},
      </if>
      <if test="createdat != null">
        #{createdat,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedat != null">
        #{updatedat,jdbcType=TIMESTAMP},
      </if>
      <if test="invalid != null">
        #{invalid,jdbcType=BIT},
      </if>
      <if test="note != null">
        #{note,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.awsports.pojo.AwPunishmentExample" resultType="java.lang.Long">
    select count(*) from aw_punishment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update aw_punishment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.tournamentid != null">
        tournamentId = #{record.tournamentid,jdbcType=INTEGER},
      </if>
      <if test="record.matchtime != null">
        matchtime = #{record.matchtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.entry != null">
        entry = #{record.entry,jdbcType=INTEGER},
      </if>
      <if test="record.points != null">
        points = #{record.points,jdbcType=INTEGER},
      </if>
      <if test="record.createdat != null">
        createdAt = #{record.createdat,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedat != null">
        updatedAt = #{record.updatedat,jdbcType=TIMESTAMP},
      </if>
      <if test="record.invalid != null">
        invalid = #{record.invalid,jdbcType=BIT},
      </if>
      <if test="record.note != null">
        note = #{record.note,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update aw_punishment
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      tournamentId = #{record.tournamentid,jdbcType=INTEGER},
      matchtime = #{record.matchtime,jdbcType=TIMESTAMP},
      entry = #{record.entry,jdbcType=INTEGER},
      points = #{record.points,jdbcType=INTEGER},
      createdAt = #{record.createdat,jdbcType=TIMESTAMP},
      updatedAt = #{record.updatedat,jdbcType=TIMESTAMP},
      invalid = #{record.invalid,jdbcType=BIT},
      note = #{record.note,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update aw_punishment
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      tournamentId = #{record.tournamentid,jdbcType=INTEGER},
      matchtime = #{record.matchtime,jdbcType=TIMESTAMP},
      entry = #{record.entry,jdbcType=INTEGER},
      points = #{record.points,jdbcType=INTEGER},
      createdAt = #{record.createdat,jdbcType=TIMESTAMP},
      updatedAt = #{record.updatedat,jdbcType=TIMESTAMP},
      invalid = #{record.invalid,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.awsports.pojo.AwPunishment">
    update aw_punishment
    <set>
      <if test="userid != null">
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="tournamentid != null">
        tournamentId = #{tournamentid,jdbcType=INTEGER},
      </if>
      <if test="matchtime != null">
        matchtime = #{matchtime,jdbcType=TIMESTAMP},
      </if>
      <if test="entry != null">
        entry = #{entry,jdbcType=INTEGER},
      </if>
      <if test="points != null">
        points = #{points,jdbcType=INTEGER},
      </if>
      <if test="createdat != null">
        createdAt = #{createdat,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedat != null">
        updatedAt = #{updatedat,jdbcType=TIMESTAMP},
      </if>
      <if test="invalid != null">
        invalid = #{invalid,jdbcType=BIT},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.awsports.pojo.AwPunishment">
    update aw_punishment
    set userId = #{userid,jdbcType=INTEGER},
      tournamentId = #{tournamentid,jdbcType=INTEGER},
      matchtime = #{matchtime,jdbcType=TIMESTAMP},
      entry = #{entry,jdbcType=INTEGER},
      points = #{points,jdbcType=INTEGER},
      createdAt = #{createdat,jdbcType=TIMESTAMP},
      updatedAt = #{updatedat,jdbcType=TIMESTAMP},
      invalid = #{invalid,jdbcType=BIT},
      note = #{note,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awsports.pojo.AwPunishment">
    update aw_punishment
    set userId = #{userid,jdbcType=INTEGER},
      tournamentId = #{tournamentid,jdbcType=INTEGER},
      matchtime = #{matchtime,jdbcType=TIMESTAMP},
      entry = #{entry,jdbcType=INTEGER},
      points = #{points,jdbcType=INTEGER},
      createdAt = #{createdat,jdbcType=TIMESTAMP},
      updatedAt = #{updatedat,jdbcType=TIMESTAMP},
      invalid = #{invalid,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>